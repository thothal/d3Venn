% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/d3Venn.R
\name{d3VennOutput}
\alias{d3VennOutput}
\alias{renderD3Venn}
\title{Shiny bindings for d3Venn}
\usage{
d3VennOutput(outputId, width = "100\%", height = "400px")

renderD3Venn(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{outputId}{string, output variable to read the d3Venn diagram from}

\item{width, }{height Must be a valid CSS unit (like \code{'100\%'},
\code{'400px'}, \code{'auto'}) or a number, which will be coerced to a
string and have \code{'px'} appended.}

\item{expr}{expression, which creates the d3Venn object.}

\item{env}{environment in which to evaluate \code{expr}.}

\item{quoted}{boolean, is \code{expr} a quoted expression (with \code{quote()})? This
is useful if you want to save an expression in a variable.}
}
\value{

}
\description{
Output and render functions for using d3Venn within Shiny applications and interactive
RMD documents
}
\examples{
if (requireNamespace("shiny", quietly = TRUE)) {
   ui <- fluidPage(
      sliderInput("a", "Set A:", 10, 100, 10, 10),
      sliderInput("b", "Set B:", 10, 100, 10, 10),
      sliderInput("ovl", "Overlap:", 0, 100, 10, 10, post = "\%"),
      d3VennOutput("venn")
   )

   server <- function(input, output) {
      output$venn <- renderD3VennOutout({
         n_A <- req(input$a)
         n_B <- req(input$b)
         n_AB <- round(req(input$ovl) / 100 * min(n_A, n_B))
         if (n_AB > 0) {
            dat <- data.frame(sets = I(list("A", "B", list("A", "B"))),
                              sizes = c(n_A, n_B, n_AB))
         } else {
            dat <- data.frame(sets = c("A", "B"),
                              sizes = c(n_A, n_B))
         }
         d3Venn(dat)
      })
   }

   shinyApp(ui, server)
}
}
